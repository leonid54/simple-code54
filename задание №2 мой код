#include <iostream>
#include <locale>
#include <string>

using namespace std;

//задание №2

template<typename T>
class List
{
public:
	List();
	~List();
	void push_back(T data);//вывод списка
	int GetSize() { return Size; }//размер списка
	T& operator[](const int index);//функция проверки любого элемента списка
	bool print(List lst, List lst2);//функция проверки равенства элементов двух списков
	bool operator==(const List & lst2)
	{
		Node<T>* current = lst2.head;
		Node<T>* thisCurrent = head;
		
		while (current != nullptr && thisCurrent != nullptr )//проверка равенства списков
		{
			if (thisCurrent->data == current->data)
			{
				thisCurrent = thisCurrent->pNext;
				current = current->pNext;
			}
			else
			{
			    return false;
			}
		}
		
		if (thisCurrent == nullptr && current == nullptr)
		{
			return true;
		}
		
		return false;
		
	}
	
private:
	template<typename J>
	class Node
	{
	public:
		Node* pNext;
		J data;
		Node(J data = J(), Node* pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};
	int Size = 0;
	Node<T>* head = nullptr;
	
};

template<typename T>
List<T>::List()
{
}

template<typename T>
List<T>::~List()
{
    Node<T>* current = this->head;
    Node<T>* next = nullptr;
    
    while(current != nullptr)
    {
        if(current->pNext != nullptr)
        {
            next = current->pNext;
        }
        else
        {
            next = nullptr;
        }
        delete current;
        current = nullptr;
        if(next != nullptr)
        {
            current = next;
        }
    }
}

template<typename T>
void List<T>::push_back(T data)
{
	if (head == nullptr)
	{
		head = new Node<T>(data);
	}
	else
	{
		Node<T>* current = this->head;
		while (current->pNext != nullptr)
		{
			current = current->pNext;
		}
		current->pNext = new Node<T>(data);	
	}
	
	Size++;
}


void ASSERT_TRUE(bool result, const char * caseName)
{
	if (true == result)
	{
		cout << caseName << " passed" << endl;
	}
	else
    cout << caseName << " NOT passed" << endl;
}

void ASSERT_FALSE(bool result, const char* caseName)
{
	if (true == result)
	{
		cout << "case " << caseName << " NOT passed" << endl;
	}
	else
	cout << "case " << caseName << " passed" << endl;
}

int main()
{
	setlocale(LC_ALL, "ru");
	
	{
		List<int> lst;
		List<int> lst2;

		ASSERT_TRUE(lst == lst2, "Кейс, списки пустые");
	}
	
	{
		List<int> lst;
		List<int> lst2;

		lst2.push_back(5);

		ASSERT_FALSE(lst == lst2, "Кейс, список 1 пустой");
	}
	
	{
		List<int> lst;
		List<int> lst2;

		lst.push_back(10);
		ASSERT_FALSE(lst == lst2, "Кейс, список 2 пустой");
	}
	
	{
		List<int> lst;
		List<int> lst2;

		lst.push_back(10);
		lst.push_back(10);
		lst2.push_back(10);
		lst2.push_back(10);
		ASSERT_TRUE(lst == lst2, "Кейс, списки равны");
	}
	
	{
		List<int> lst;
		List<int> lst2;

		lst.push_back(20);
		lst.push_back(10);
		lst2.push_back(10);
		lst2.push_back(10);
		ASSERT_FALSE(lst == lst2, "Кейс, списки не равны, отличается первый");
	}
	
	{
		List<int> lst;
		List<int> lst2;

		lst.push_back(10);
		lst.push_back(10);
		lst2.push_back(20);
		lst2.push_back(10);
		ASSERT_FALSE(lst == lst2, "Кейс, списки не равны, отличается второй");
	}
	
	{
		List<int> lst;
		List<int> lst2;

		lst.push_back(10);
		lst2.push_back(10);
		lst2.push_back(10);
		ASSERT_FALSE(lst == lst2, "Кейс, списки разной длинны, первый короче");
	}
	
		{
		List<int> lst;
		List<int> lst2;

		lst.push_back(10);
		lst.push_back(10);
		lst2.push_back(10);
		ASSERT_FALSE(lst == lst2, "Кейс, списки разной длинны, второй короче");
	}
	
	{
		List<int> lst;
		List<int> lst2;

		lst.push_back(11);
		lst.push_back(12);
		lst.push_back(10);
		lst.push_back(10);
		lst2.push_back(13);
		lst2.push_back(14);
		lst2.push_back(10);
		lst2.push_back(10);
		ASSERT_FALSE(lst == lst2, "Кейс, списки одинаковой длинны, в списках равны последние 2 элемента");
	}

	return 0;
}
