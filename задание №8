#include <iostream>
using namespace std;

template <typename T>
class List
{
public:
	List();
	~List();
	int Size;
	void push_back(T data);
	T& operator[](const int index);
	void turn_HEAD(List<int> lst);
	
private:
	template <typename T>
	class Node
	{
	public:
		T data;
		Node* pNext;
		Node(T data = T(), Node* pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};
	Node<T>* head;


};
template <typename T>
List<T>::List()
{
	head = nullptr;
	Size = 0;
}
template <typename T>
List<T>::~List()
{
}

template<typename T>
void List<T>::push_back(T data)
{
	if (head == nullptr)
	{
		head = new Node<T>(data);
	}
	else
	{
		Node<T>* current = this->head;
		while (current->pNext != nullptr)
		{
			current = current->pNext;

		}
		current->pNext = new Node<T>(data);

	}
	/*cout << data << endl;*/
	Size++;
}

template<typename T>
T& List<T>::operator[](const int index)
{
	int count = 0;
	Node<T>* current = this->head;
	while (current != nullptr)
	{
		if (count == index)
		{
			return current->data;
		}
		count++;
		current = current->pNext;
	}
}

template<typename T>
void List<T>::turn_HEAD(List<int> lst)
{
	Node<T>* current = this->head;
	Node<T>* last = this->head;
	while (current->pNext != nullptr)
	{
		
		current = current->pNext;
	}
	if (current->pNext == nullptr)
	{
		current->pNext = last;
		current = current->pNext;
	}
	while (last->pNext != )
	{
		last = last->pNext;
		current->pNext= last->pNext;
	}
	
}

int main()
{
	setlocale(LC_ALL, "ru");

	List<int> lst;
	lst.push_back(1);
	lst.push_back(2);
	lst.push_back(3);

	for (int i = 0; i < lst.Size; i++)
	{
		cout << lst[i] << endl;
	}
	lst.turn_HEAD(lst);
	for (int i = 0; i < lst.Size; i++)
	{
		cout << lst[i] << endl;
	}



	return 0;
}
