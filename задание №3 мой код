#include <iostream>
#include <string>
#include <cstring>
using namespace std;
//задание №3



template<typename T>
class List
{
public:
	List();
	~List();
	void push_back(T data);//вывод списка
	int GetSize() { return Size; }//размер списка
	T& operator[](const int index);//функция проверки любого элемента списка
	int Counter(List<string>* lst);


private:
	template<typename T>
	class Node
	{
	public:
		Node* pNext;
		T data;
		Node(T data = T(), Node* pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};
	int Size;
	Node<T>* head;

};

template<typename T>
List<T>::List()
{
	Size = 0;
	head = nullptr;
}

template<typename T>
List<T>::~List()
{
Node<T>* current = this->head;
	Node<T>* next = nullptr;

	while (current != nullptr)
	{
		if (current->pNext != nullptr)
		{
			next = current->pNext;
		}
		else
		{
			next = nullptr;
		}
		delete current;
		current = nullptr;
		if (next != nullptr)
		{
			current = next;
		}
	}
}

template<typename T>
void List<T>::push_back(T data)
{
	if (head == nullptr)
	{
		head = new Node<T>(data);
	}
	else
	{
		Node<T>* current = this->head;
		while (current->pNext != nullptr)
		{
			current = current->pNext;

		}
		current->pNext = new Node<T>(data);

	}
	cout << data << endl;
	Size++;
}




ttemplate<typename T>
int List<T>::Counter(List<string>* lst)
{
	int n = 0;
	Node<T>* current = this->head;

	while (current != nullptr) { // пока есть элементы списка
		if (!current->data.empty() && current->data.front() == current->data.back()) // сравниваем 1 и последний символ
			n++;
		current = current->pNext; // переход на следующий узел
	}
	return n;

}


int main()
{
	setlocale(LC_ALL, "ru");

	List<string> lst;

	lst.push_back("одно");
	lst.push_back("два");
	lst.push_back("тот");

	
	cout << lst.Counter(&lst) << endl;

	return 0;
}
