#include <iostream>
#include <string>

using namespace std;

template <typename T>
class List
{
public:
	List();
	~List();
	void push_back(T data);
	T& operator [](const int index);
	void Alphabet_List(List lst);

private:
	template <typename T>
	class Node
	{
	public:
		T data;
		Node* pNext;
		Node(T data = T(), Node* pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};
	Node<T>* head;
	int Size;
};
template <typename T>
List<T>::List()
{
	head = nullptr;
	Size = 0;
}
template <typename T>
List<T>::~List()
{
}

template<typename T>
void List<T>::push_back(T data)
{
	
	if (head == nullptr)
	{
		head = new Node<T>(data);
		
	}
	else
	{
		Node<T>* current = this->head;
		while (current->pNext != nullptr)
		{
			current = current->pNext;
		}
		current->pNext = new Node<T>(data);
	}
	cout << data << endl;
	Size++;
}

template<typename T>
void List<T>::Alphabet_List(List lst)
{
	Node<T>* current = this->head;
	int i = 1;	//Счётчик
	char letter;
	while (current->pNext != nullptr && !current->data.empty()) //Пока в списке есть элементы
	{
		letter = current->data.front();
		current = current->pNext;
		if (letter < current->data.front())
		{
			i++;
		}
		else if (letter == current->data.front())
		{
			i++;
		}
		else
		{
			i--;
		}
	}
	if (i == Size)
	{
		cout << "Все элементы списка упорядочены по алфавиту" << endl;
	}
	else
	{
		cout << "Все элементы списка НЕ упорядочены по алфавиту" << endl;
	}

}


int main()
{
	setlocale(LC_ALL, "ru");

	List<string> lst;
	
	lst.push_back("алфавит");
	lst.push_back("упорядочен"); 
	lst.push_back("я уверен!");

	
	lst.Alphabet_List(lst);
	
	return 0;
}
