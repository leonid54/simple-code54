#include <iostream>

using namespace std;

//задание №10

template<typename T>
class List
{
public:
	List();
	~List();
	void push_back(T data);//вывод списка
	void count_E(List<int> L, int E);
	void delete_E(List<int> L, int E);
	T& operator[](const int index);
private:
	template<typename T>
	class Node
	{
	public:
		Node* pNext;
		T data;
		Node(T data = T(), Node* pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};
	int Size;
	Node<T>* head;

};

template<typename T>
List<T>::List()
{
	Size = 0;
	head = nullptr;
}

template<typename T>
List<T>::~List()
{
}

template<typename T>
void List<T>::push_back(T data)
{
	if (head == nullptr)
	{
		head = new Node<T>(data);
	}
	else
	{
		Node<T>* current = this->head;
		while (current->pNext != nullptr)
		{
			current = current->pNext;

		}
		current->pNext = new Node<T>(data);

	}
	Size++;
}

template<typename T>
void List<T>::count_E(List<int> L, int E)
{
	Node<T>* current = this->head;
	int counter = 0;
	while (current->pNext != nullptr)
	{
		if (current->data == E)
		{
			counter++;
			current = current->pNext;
		}
		else
		{
			current = current->pNext;
		}
	}
	if(current->pNext == nullptr && current->data==E)
		{
			counter++;
		}
	cout <<"Количество вхождений числа Е в список = " << counter <<endl;
}

template<typename T>
void List<T>::delete_E(List<int> L, int E)
{
	Node<T>* current = this->head;
	Node<T>* first = this->head;
	while (current->pNext != nullptr)
	{
		if (current->pNext->data == E)
		{
			current->pNext->data = first->data;
			current = current->pNext;
		}
		else
		{
			current = current->pNext;
		}
	}
	if (current->pNext == nullptr && current->data == E)
	{
		current->data = first->data;
	}
}
template<typename T>
T& List<T>::operator[](const int index)
{
	int counter = 0;
	Node<T>* current = this->head;
	while (current != nullptr)
	{
		if (counter == index)
		{
			return current->data;
		}
		current = current->pNext;
		counter++;
	}

}
int main()
{
	setlocale(LC_ALL, "ru");

	int E;
	cin >> E;


	List<int> L;
	L.push_back(1);
	L.push_back(E);
	L.push_back(3);
	L.push_back(4);
	L.push_back(E);
	L.push_back(E);

	L.count_E(L, E);
	for (int i = 0; i < 6; i++)
	{
		cout << L[i] << endl;
	}
	L.delete_E(L, E);
	for (int i = 0; i < 6; i++)
	{
		cout << L[i] << endl;
	}
	return 0;
}
